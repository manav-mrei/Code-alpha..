#include<iostream>
using namespace std;
const int N=9;
int i;
int grid[N][N]= {
{0, 1, 0, 5, 0, 8, 4, 0, 0},
{0, 2, 0, 1, 0, 4, 0, 0, 0},
{0, 0, 7, 6, 0, 9, 0, 0, 1},
{2, 0, 0, 4, 1, 0, 0, 8, 0},
{9, 0, 4, 0, 0, 3, 0, 0, 5},
{0, 5, 0, 0, 9, 2, 6, 0, 3},
{0, 3, 0, 0, 0, 0, 2, 5, 6},
{0, 0, 0, 3, 0, 0, 0, 7, 4},
{7, 0, 5, 0, 0, 0, 3, 0, 9},
};
bool isPresentInCol(int column,int num) {
for(int row=0;row<N;row++)
if (grid[row][column]==num)
return true;
return false;
}
bool isPresentInRow(int row,int number) {
for(int col=0;col<N;col++)
if (grid[row][col]==number)
return true;
return false;
}
bool isPresentInBox(int boxRow1, int boxCol1, int num1) {
for(int row=0;row<3;row++)
for(int col=0;col<3;col++)
if(grid[row+boxRow1][col+boxCol1]==num1)
return true;
return false;
}
void Grid() {
for(int row=0;row<N;row++) {
for(int col=0;col<N;col++) {
if(col==3 || col==6)
cout<<" | ";
cout<< grid [row][col] <<" ";
}
if (row==2 || row==5) {
cout<<endl;
for(i=0;i<N;i++)
cout<<"---";
}
cout<<endl;
}
}
bool findFreePlace(int &rows, int &cols) {
for(rows=0;rows<N;rows++)
for(cols=0;cols<N;cols++)
if(grid[rows][cols]==0)
return true;
return false;
}
bool isTruePlace(int row,int col,int num) {
return !isPresentInRow(row,num) && !isPresentInCol(col,num) && !isPresentInBox(row-row%3,col-col%3,num);
}
bool SudokuPuzzle(){
int row4,col4;
if(!findFreePlace(row4,col4))
return true;
for(int num=1;num<=9;num++) {
if(isTruePlace(row4,col4,num)) {
grid[row4][col4]=num;
if (SudokuPuzzle())
return true;
grid [row4][col4]=0;
}
}
return false;
}
int main() {
if(SudokuPuzzle()==true)
Grid();
else
cout<<"Solution Does Not Found";
}

